CREATE TABLE  IF NOT EXISTS olderItem (
    item_id INTEGER PRIMARY KEY AUTOINCREMENT,
    older_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    sale_price REAL NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 1,
    FOREIGN KEY (older_id) REFERENCES older(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

insertAndGetId:
INSERT INTO olderItem (older_id, product_id, sale_price, quantity) VALUES (?, ?, ?, ?);
SELECT last_insert_rowid();

insert:
INSERT INTO olderItem (older_id, product_id, sale_price, quantity) VALUES (?, ?, ?, ?);

getLastInsertId:
SELECT last_insert_rowid();

selectById:
SELECT * FROM olderItem WHERE item_id = ?;

selectByOrderId:
SELECT * FROM olderItem WHERE older_id = ?;

selectByProductId:
SELECT * FROM olderItem WHERE product_id = ?;

selectAll:
SELECT * FROM olderItem ORDER BY item_id;

updateSalePrice:
UPDATE olderItem SET sale_price = ? WHERE item_id = ?;

updateQuantity:
UPDATE olderItem SET quantity = ? WHERE item_id = ?;

updateItem:
UPDATE olderItem SET sale_price = ?, quantity = ? WHERE item_id = ?;

deleteById:
DELETE FROM olderItem WHERE item_id = ?;

deleteByOrderId:
DELETE FROM olderItem WHERE older_id = ?;

getOrderItemsWithDetails:
SELECT oi.*, p.product_name, p.barcode
FROM olderItem oi
JOIN products p ON oi.product_id = p.product_id
WHERE oi.older_id = ?;

getOrderTotal:
SELECT SUM(sale_price * quantity) FROM olderItem WHERE older_id = ?;

